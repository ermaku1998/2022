/*IA_ASSORT_MATRIX_HIST_скелет(проверка_с_IA_PRICE_HIST)*/


%if %sysfunc(sessfound(casauto))=0 %then %do;
cas casauto;
caslib _all_ assign;
%end;

options casDATALIMIT = All;

/*
proc import file = '/data/sandbox/artem_yukhnevich/PMIX_ONLY_TOP50_PRODUCTS.csv'
out = work.PMIX_ONLY_TOP50_PRODUCTS
dbms=csv;
run;
*/


/*Выбираем строки из диапазона 01.01.2020 - 1.03.2022(случаи START > END отсутствуют)*/
proc sql;
CREATE TABLE assort_matrix_hist_20_22 as
SELECT PRODUCT_ID, PBO_LOCATION_ID, START_DT, END_DT
FROM IA.IA_ASSORT_MATRIX_HISTORY
WHERE (YEAR(START_DT) = 2022 and MONTH(START_DT) <= 2) or
      (YEAR(START_DT) <= 2021 and YEAR(END_DT) >= 2020)
;




/* К таблице "скелета" слева джоиним цены из IA.IA_PRICE_HISTORY и смотрим покрытие. (Все ли периоды покрывает таблица цен) 
   	В IA_PRICE_HISTORY 61852 строки START > END, которые мы убрали */
proc sql;
CREATE TABLE assort_matrix_join_ia_pr_hist as 
SELECT a.PRODUCT_ID, a.PBO_LOCATION_ID, GROSS_PRICE_AMT,
	   a.START_DT as START_assort, a.END_DT as END_assort, 
	   p.START_DT as START_price_hist, p.END_DT as END_price_hist
FROM assort_matrix_hist_20_22 as a LEFT JOIN IA.IA_PRICE_HISTORY as p
	 ON a.PRODUCT_ID = p.PRODUCT_ID and a.PBO_LOCATION_ID = p.PBO_LOCATION_ID and
		a.START_DT <= p.END_DT and a.END_DT >= p.START_DT
WHERE p.START_DT <= p.END_DT
;
/*Получилось 2.701.609 строк*/

/*Проверки на нулевые значения при пересечении - получилось 4910 строк*/
proc sql;
CREATE TABLE proverka as
SELECT PRODUCT_ID, PBO_LOCATION_ID, 
	   DATEPART(START_ASSORT) format date9. as START,
	   DATEPART(END_ASSORT) format date9. as ENDD
FROM assort_matrix_join_ia_pr_hist
WHERE start_price_hist is null;




/*Делаем тоже самое для PMIX_SALES_HISTORY в связки с ASSORT_MATRIX*/

proc sql;
CREATE TABLE assort_matrix_hist_20_22 as
SELECT PRODUCT_ID, PBO_LOCATION_ID, START_DT, END_DT
FROM IA.IA_ASSORT_MATRIX_HISTORY
WHERE (YEAR(START_DT) = 2022 and MONTH(START_DT) <= 2) or
      (YEAR(START_DT) <= 2021 and YEAR(END_DT) >= 2020)
;

/* К таблице "скелета" слева джоиним цены из IA.IA_PMIX_SALES_HISTORY (со всей) и смотрим покрытие. 
	 (Все ли периоды покрывает таблица цен)*/
proc sql;
CREATE TABLE assort_matr_join_pmix_sale_hist as 
SELECT a.PRODUCT_ID, a.PBO_LOCATION_ID, GROSS_SALES_AMT/SALES_QTY as SALE,
	   SALES_QTY, START_DT, SALES_DT, END_DT
FROM assort_matrix_hist_20_22 as a LEFT JOIN IA.IA_PMIX_SALES_HISTORY as p
	 ON a.PRODUCT_ID = p.PRODUCT_ID and a.PBO_LOCATION_ID = p.PBO_LOCATION_ID and
		(SALES_DT BETWEEN START_DT and END_DT);
/*Получилось 372.035.752 строки*/

/*Проверки на нулевые значения при пересечении - получилось 4 строки*/
proc sql;
CREATE TABLE proverka as
SELECT PRODUCT_ID, PBO_LOCATION_ID, START_DT, END_DT
FROM assort_matr_join_pmix_sale_hist
WHERE SALES_QTY is null;

/**/
proc sql;
SELECT P.PRODUCT_ID, PRODUCT_NM, L.PBO_LOCATION_ID, PBO_LOCATION_NM, 
	PROVERKA.START_DT, PROVERKA.END_DT
FROM PROVERKA INNER JOIN IA.IA_PRODUCT  P
	ON PROVERKA.PRODUCT_ID = P.PRODUCT_ID INNER JOIN IA.IA_PBO_LOCATION L
	ON PROVERKA.PBO_LOCATION_ID = L.PBO_LOCATION_ID
;
